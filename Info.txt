CRUD,REST,Паттерн DAO (Data Access Object)
CRUD приложение. Часть 1.
------------------------------------------------------------------------------------------------------------------------
CRUD - стандартная классификация функций по манипуляции данными.

Четыре базовые функции, используемые при работе с базами данных:
- Create (создаем что то новое)
- Read (читаем)
- Update (обновляем существующие значения)
- Delete (удаляем)
========================================================================================================================
CRUD приложение - это приложение, которое позволяет добавлять, читать, обнолвять, удалять данные.

               C,U,D
CRUD        ----------> База
приложение  <---------- Данных
                 R
========================================================================================================================
Чаще всего CRUD приложения являются Web-приложениями. Те доступ к БД представляется через протокол HTTP.

                HTTP                       CRUD
          Post,Patch,Delete
Клиент через  --------> CRUD приложение  --------> База
браузер       <-------- (на web сервере) <-------- Данных
                 GET
Большинство Web-приложений - CRUD приложения
========================================================================================================================
Пример CRUD'а для сущности Post

HTTP метод      URL           |         Действие
                              |
- GET         /posts          | Получаем все записи(READ)
- POST        /posts          | Создаем новую запись(CREATE)
- GET         /posts/new      | HTML форма создания записи
- GET         /posts/:id/edit | HTML форма редактирования записи
- GET         /posts/:id      | Получаем одну запись(READ)
- PATCH       /posts/:id      | Обновляем запись(UPDATE)
- DELETE      /posts/:id      | Удаляем запись(DELETE)

Почему именно такие URL'ы и HTTP методы?
Дело в том что вот это все описывается стандартом REST
- REST - это паттерн проектирования веб приложений
- REST описывает то, как посредством протокола HTTP должен взаимодействовать клиент с сервером
- Все взаимодействия с сервером сводится к 4 опциям-получение данных,добавление новых данных,изменение существующих данных,
удаление данных.
- Для каждой из 4 операций используется свой HTTP метод-GET,POST,PATCH,DELETE

И это не все правила и ограничения, которые описаны в REST. Есть множество других.
========================================================================================================================
REST vs CRUD
CRUD-четыре базовые функции, используемые при работе с БД
REST-паттерн проектирования web-приложений. Описывает, как по протоколу HTTP взаимодействовать с сервером для чтения,добавления,
изменения,удаления данных.Описывает,какие URL'ы,HTTP методы использовать(но не только это).
------------------------------------------------------------------------------------------------------------------------
Что будем делать?
Реализуем CRUD приложение для сущности Person

                                                   C,U,D
GET/people       |PeopleController | ---> |Person | ---> People
GET/people/:id   |  @Controller    |      |Model  | <---   DB
                                                      R

(1) Реализуем операцию READ
(2) Мы хотим вынести логику взаимодействия с БД из самой модели в отдельный класс. Паттерн проектирования, когда отдельный
класс занимается взаимодействием с БД для конкретной сущности называется DAO.Паттерн DAO(Data Access Object)

Person ---> PersonDAO ---> БД
       <---           <---
-Вся логика работы с БД для модели Person инкапсулируется в класс PersonDAO
-В DAO классах обычно пишется SQL код для работы с БД приложения (чтение,запись,обновление,удаление)
-Есть другой паттерн взаимодействия с БД-репозиторий.Этот паттерн предоставляет большую абстракцию над БД,чем DAO.
========================================================================================================================
========================================================================================================================
Аннотация @ModelAttribute.
HTML формы(Thymeleaf).

Аннотация @ModelAttribute.
может аннотировать:
- метод
@ModelAttribute("headerMessage")
public String populateHeaderMessage(){
return "Welcome to our website!";
}
-аргумент метода
@PostMapping()
public String create(@ModelAttribute("person") Person person){
personDAO.save(person);
return "redirect:/people";
}
